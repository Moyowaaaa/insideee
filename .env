REACT_APP_GOOGLE_MAPS_API_KEY=AIzaSyAFSIlnC3AxCLdNb4RBU2b1BGdic8nBpCI

"d0b93b3ace97b8af"


  navigator.geolocation.getCurrentPosition(
        async (position) => {
          const userLocation = {
            lat: position.coords.latitude,
            lng: position.coords.longitude,
          };
          setLocation(userLocation);

          // Load libraries after Google Maps is available
          const { Map } = (await google.maps.importLibrary(
            "maps"
          )) as google.maps.MapsLibrary;
          const { PlacesService } = (await google.maps.importLibrary(
            "places"
          )) as google.maps.PlacesLibrary;
          const { Geocoder } = (await google.maps.importLibrary(
            "geocoding"
          )) as google.maps.GeocodingLibrary;

          const { AdvancedMarkerElement } = (await google.maps.importLibrary(
            "marker"
          )) as google.maps.MarkerLibrary;

          if (!mapRef.current) return;

          const map = new Map(mapRef.current, {
            center: userLocation,
            zoom: 15,
            gestureHandling: "greedy",
            disableDefaultUI: true,
          });

          new google.maps.Marker({
            position: userLocation,
            map,
            title: "Your Location",
          });

          const geocoder = new Geocoder();
          geocoder.geocode({ location: userLocation }, (results, status) => {
            if (status === google.maps.GeocoderStatus.OK && results?.length) {
              setLocationName(results[0].formatted_address);
              console.log("📍 Current Location:", results[0].formatted_address);
            } else {
              console.error("Geocoder failed:", status);
            }
          });

          const service = new PlacesService(map);
          const request = {
            location: new google.maps.LatLng(
              userLocation.lat,
              userLocation.lng
            ),

            radius: 5000,
            type: "bank",
          };

          service.nearbySearch(request, (results, status) => {
            if (
              status === google.maps.places.PlacesServiceStatus.OK &&
              results
            ) {
              setPlaces(results);
              console.log(results);
              results.forEach((place) => {
                if (place.geometry?.location) {
                  new google.maps.Marker({
                    position: place.geometry.location,
                    map,
                    title: place.name,
                  });
                }
              });
            }
          });
        },
        (error) => {
          console.error("Error getting location:", error);
        }
      );